/*
 * Weather station
 *
 * This is a sample weather station server. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Reading :  IEquatable<Reading>
    { 
        /// <summary>
        /// Gets or Sets StationId
        /// </summary>
        [DataMember(Name="stationId")]
        public string StationId { get; set; }

        /// <summary>
        /// Gets or Sets SensorType
        /// </summary>
        [DataMember(Name="sensorType")]
        public string SensorType { get; set; }

        /// <summary>
        /// Gets or Sets ReadingTimestampUtc
        /// </summary>
        [DataMember(Name="readingTimestampUtc")]
        public DateTime? ReadingTimestampUtc { get; set; }

        /// <summary>
        /// Gets or Sets SensorValue
        /// </summary>
        [DataMember(Name="sensorValue")]
        public decimal? SensorValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Reading {\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  SensorType: ").Append(SensorType).Append("\n");
            sb.Append("  ReadingTimestampUtc: ").Append(ReadingTimestampUtc).Append("\n");
            sb.Append("  SensorValue: ").Append(SensorValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Reading)obj);
        }

        /// <summary>
        /// Returns true if Reading instances are equal
        /// </summary>
        /// <param name="other">Instance of Reading to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Reading other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StationId == other.StationId ||
                    StationId != null &&
                    StationId.Equals(other.StationId)
                ) && 
                (
                    SensorType == other.SensorType ||
                    SensorType != null &&
                    SensorType.Equals(other.SensorType)
                ) && 
                (
                    ReadingTimestampUtc == other.ReadingTimestampUtc ||
                    ReadingTimestampUtc != null &&
                    ReadingTimestampUtc.Equals(other.ReadingTimestampUtc)
                ) && 
                (
                    SensorValue == other.SensorValue ||
                    SensorValue != null &&
                    SensorValue.Equals(other.SensorValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StationId != null)
                    hashCode = hashCode * 59 + StationId.GetHashCode();
                    if (SensorType != null)
                    hashCode = hashCode * 59 + SensorType.GetHashCode();
                    if (ReadingTimestampUtc != null)
                    hashCode = hashCode * 59 + ReadingTimestampUtc.GetHashCode();
                    if (SensorValue != null)
                    hashCode = hashCode * 59 + SensorValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Reading left, Reading right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Reading left, Reading right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
